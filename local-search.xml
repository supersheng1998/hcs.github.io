<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>红黑树的前世今生</title>
    <link href="/2021/04/06/%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <url>/2021/04/06/%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
    
    <content type="html"><![CDATA[<p>参考：《大话数据结构》和<a href="https://zhuanlan.zhihu.com/p/94575830">https://zhuanlan.zhihu.com/p/94575830</a></p><h1 id="红黑树的前世"><a href="#红黑树的前世" class="headerlink" title="红黑树的前世"></a>红黑树的前世</h1><h2 id="2-3-4树"><a href="#2-3-4树" class="headerlink" title="2-3-4树"></a>2-3-4树</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>2-3-4树是对平衡二叉树的扩展<br>先列出相关定义：  </p><ul><li>在一个节点中，可以有1-3个key，左边比右边的值小。</li><li>2-节点，拥有1个key和2个子节点</li><li>3-节点，拥有2个key和3个子节点。</li><li>4-节点，拥有3个key和4个子节点。</li><li>任意从根节点到叶子节点的路径拥有相同的长度，即路径上的链接数相同。  </li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li>查找类似二叉树，与当前节点的key进行比较。  </li><li>如果与当前节点的key有相等的，直接返回key对应的值。  </li><li>如果没有相等的：  <ul><li>2-节点：类似二叉树  </li><li>3-节点：比最左边小就是左子树，比左边大右边小就是中间子树，比右边大就是右子树。  </li><li>4-节点：类似3-节点</li></ul></li></ul><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>注意：2-3-4树的插入，不会发生在中间节点，只会在叶子节点上进行插入。</p><ol><li>首先进行查找，找到插入的位置  </li><li>如果是对2-节点插入，则2-节点变成3-节点</li><li>如果是对3-节点插入，则3-节点变成4-节点</li><li>如果是对4-节点插入，这时需要先将4-节点中间的节点提升到父节点，使父节点重新进行步骤2-4。<br>然后4-节点降为3-节点，重新插入一个key成为4-节点。  </li></ol><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li>如果删除的key是3-叶子节点或4-叶子节点直接删除即可</li><li>如果删除的key在2-叶子节点上，会导致树的平衡被破坏，因此得规避这种情况。<ul><li>将要被删除的叶子节点，从其兄弟节点“借”一个key进行融合变成3-节点；</li><li>也可以将父节点的key和兄弟节点的key融合，变成一个4-节点；</li><li>主要保证变化过程中树的平衡性不被破坏即可。变换完成之后的节点类型是3-或4-节点，自然就可以成功删除了。</li></ul></li><li>删除非叶子节点，使用中序遍历下的直接后继节点key来覆盖当前节点key，再删除用来覆盖的后继节点key。</li></ul><h2 id="2-3-4树–-gt-红黑树"><a href="#2-3-4树–-gt-红黑树" class="headerlink" title="2-3-4树–&gt;红黑树"></a>2-3-4树–&gt;红黑树</h2><h3 id="2-3-4树的缺点"><a href="#2-3-4树的缺点" class="headerlink" title="2-3-4树的缺点"></a>2-3-4树的缺点</h3><ul><li>维持3种节点类型。</li><li>多种节点类型之间需要互相转换。</li><li>在树中移动需要进行多次比较，如果节点不是2-节点的话</li></ul><h3 id="进行转换"><a href="#进行转换" class="headerlink" title="进行转换"></a>进行转换</h3><ul><li>将2-3-4树用二叉树的形式表现。</li><li>节点之间的链接区分为红色和黑色。红色链接用于将节点链接起来视作3-节点和4-节点。</li><li>3-节点有两种链接，增大了复杂性，因此对转换要求增加一条约束，红色链接只能为左连接。<br><img src="/2021/04/06/%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/234%E8%BD%AC%E7%BA%A2%E9%BB%91%E6%A0%91.png" alt="图1"></li></ul><h3 id="转换结果"><a href="#转换结果" class="headerlink" title="转换结果"></a>转换结果</h3><ul><li>通过三个约束后，转换得到二叉树我们称之为 <strong>左倾斜红黑树</strong>  </li><li>特点：<ul><li>转换后的二叉树可以使用二叉树的搜索方式。</li><li>转换后的二叉树和2-3-4树处于一致关系，改变的只是表现形式</li><li>完美黑色链接平衡的，即任意空链接到根结点的路径上的黑链接数量相同。 </li></ul></li><li>如果你将红黑树中所有的红色链接放平，那么它就和2-3-4树在展现上一致。<br>借一张别人的图，形象的表示了2-3-4树和红黑树的关系：<br><img src="/2021/04/06/%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/%E5%9B%BE2.jpg" alt="图2"></li></ul><h3 id="左倾斜红黑树特点"><a href="#左倾斜红黑树特点" class="headerlink" title="左倾斜红黑树特点"></a>左倾斜红黑树特点</h3><ul><li>红链接均为左链接</li><li>不能出现连续的红连接</li><li>叶子节点到根结点的路径上的黑链接数量相同</li></ul><p><strong>这样就可以和红黑树的定义结合起来了。</strong></p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><h3 id="红黑树的定义"><a href="#红黑树的定义" class="headerlink" title="红黑树的定义"></a>红黑树的定义</h3><ol><li>每个节点非黑即红 </li><li>根节点是黑色</li><li>叶节点（含空节点）是黑色 </li><li>如一个节点是红色，则它的两个子节点都是黑色的</li><li>从根节点触发到所有叶节点路径上，黑色节点数量相同 （最长是最短路径的2倍：长边红黑相间，短边全黑）<br><img src="/2021/04/06/%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/%E5%9B%BE3.png" alt="图3"></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSL证书验证</title>
    <link href="/2021/04/04/SSL%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/"/>
    <url>/2021/04/04/SSL%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<p>参考：《计算机网络-自顶向下方法》和<a href="https://www.zhihu.com/question/39136361/answer/80982546">https://www.zhihu.com/question/39136361/answer/80982546</a></p><h1 id="SSL证书验证"><a href="#SSL证书验证" class="headerlink" title="SSL证书验证"></a>SSL证书验证</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ol><li>数字签名<br>A需要给B发一个文件。首先，把文件用一个散列函数进行处理，不管源文件有多大，处理结束后都会生成一个128位的二进制，称为“摘要”。<br>再用A的私钥把摘要进行加密，这个加密后的摘要，就叫A的数字签名。  </li><li>证书<br>因为只有A持有私钥，所以只要能够用解密出明文，A就无法抵赖对此报文的签名。<br>但是A可以说这个私钥不是我的，抵赖掉。这时，就需要一个大家都信任的官方机构，来统一颁布管理各个企业的基本信息以及公私钥。<br>证书机构对发送端A的公钥AY用自己的私钥CX进行加密。然后把对应的公钥CY,证书的有效时间等放入证书。<br><img src="/2021/04/04/SSL%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/%E8%AF%81%E4%B9%A6.JPG" alt="证书图"></li></ol><h2 id="验证步骤"><a href="#验证步骤" class="headerlink" title="验证步骤"></a>验证步骤</h2><p>发生在SSL建立的第一阶段：（握手阶段）</p><ol><li>服务器将自身的证书传输给客户端。</li><li>客户端验证证书：先看CA的根证书是否在自己的信任根证书列表中。再用CA的根证书提供的公钥来验证服务器证书中的数字签名，如果公钥可以解开签名，证明该证书确实被CA所信任。再看证书是否过期，访问的网站域名与证书绑定的域名是否一致。这些都通过，说明证书可以信任。</li><li>生成一个随机数给到服务端</li><li>服务端对随机数进行签名，并回传给到客户端。</li><li>客户端用服务器证书的公钥对随机数的签名进行验证，若验证通过，则说明对应的服务器确实拥有对应服务器证书的私钥，因此判断服务器的身份正常。否则，说明该服务器身份被伪造。这些都没问题才说明服务器是可信的。</li><li>交换密钥<br><img src="/2021/04/04/SSL%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/SSL%E9%AA%8C%E8%AF%81.png" alt="步骤"></li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>四个智能指针实现</title>
    <link href="/2021/04/03/%E5%9B%9B%E4%B8%AA%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/04/03/%E5%9B%9B%E4%B8%AA%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="shared-ptr和weak-ptr"><a href="#shared-ptr和weak-ptr" class="headerlink" title="shared_ptr和weak_ptr"></a>shared_ptr和weak_ptr</h1><h2 id="shared-ptr的一些要点"><a href="#shared-ptr的一些要点" class="headerlink" title="shared_ptr的一些要点"></a>shared_ptr的一些要点</h2><ol><li>一般是实现有参构造、拷贝构造、赋值构造、析构、重载*、-&gt;  </li><li>引用计数要在堆区创建（防止其中一个实例析构就没了）</li></ol><h2 id="weak-ptr的一些要点"><a href="#weak-ptr的一些要点" class="headerlink" title="weak_ptr的一些要点"></a>weak_ptr的一些要点</h2><ol><li>无参、拷贝，赋值，析构，lock，expired  </li><li>在shared_ptr里实现cons_from_weak</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">weak_ptr2</span>;</span><span class="hljs-comment">//声明</span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">share_ptr2</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">weak_ptr2</span>&lt;</span>T&gt;;<br><span class="hljs-comment">//无参</span><br><span class="hljs-built_in">share_ptr2</span>():<span class="hljs-built_in">ptr</span>(<span class="hljs-literal">nullptr</span>),<span class="hljs-built_in">pcount</span>(<span class="hljs-literal">nullptr</span>)<br>&#123;&#125;<br><span class="hljs-comment">//构造</span><br><span class="hljs-built_in">share_ptr2</span>(T* _ptr) :<span class="hljs-built_in">ptr</span>(_ptr), <span class="hljs-built_in">pcount</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(<span class="hljs-number">1</span>))<br>&#123;&#125;<br><span class="hljs-comment">//拷贝</span><br><span class="hljs-built_in">share_ptr2</span>(<span class="hljs-keyword">const</span> share_ptr2&lt;T&gt;&amp; second):<span class="hljs-built_in">ptr</span>(second.ptr),<span class="hljs-built_in">pcount</span>(second.pcount)<br>&#123;<br>++(*pcount);<br>&#125;<br><span class="hljs-comment">//=赋值</span><br>share_ptr2&lt;T&gt;&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> share_ptr2&lt;T&gt;&amp; second)<span class="hljs-comment">//注意&lt;T&gt;</span><br>&#123;<br><span class="hljs-keyword">if</span> (second.ptr != ptr)<br>&#123;<br><span class="hljs-keyword">if</span> ((pcount!= <span class="hljs-literal">nullptr</span>) &amp;&amp;(--(*pcount) == <span class="hljs-number">0</span>))<br>&#123;<br><span class="hljs-keyword">delete</span> ptr;<span class="hljs-comment">//注意</span><br><span class="hljs-keyword">delete</span> pcount;<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;ptr = second.ptr;<br><span class="hljs-keyword">this</span>-&gt;pcount = second.pcount;<br>++(*pcount);<br>&#125;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><span class="hljs-comment">//-&gt;</span><br>T *<span class="hljs-keyword">operator</span>-&gt;()<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;ptr;<br>&#125;<br><br><span class="hljs-comment">//*</span><br>T&amp; <span class="hljs-keyword">operator</span>*()<br>&#123;<br><span class="hljs-keyword">return</span> *(<span class="hljs-keyword">this</span>-&gt;ptr);<br>&#125;<br><br><br><span class="hljs-comment">//返回引用计数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">use_count</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> *pcount;<br>&#125;<br><span class="hljs-comment">//析构</span><br>~<span class="hljs-built_in">share_ptr2</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (*pcount == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> pcount;<br><span class="hljs-keyword">delete</span> ptr;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>--(*pcount);<br>&#125;<br>&#125;<br><span class="hljs-comment">//给weakptr使用</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cons_from_weak</span><span class="hljs-params">(<span class="hljs-keyword">const</span> weak_ptr2&lt;T&gt;&amp; other)</span></span><br><span class="hljs-function"></span>&#123;<br>ptr = other.ptr;<br>pcount = other.pcount;<br>(*pcount)++;<br>&#125;<br><span class="hljs-keyword">private</span>:<br>T* ptr;<br><span class="hljs-keyword">int</span>* pcount;<br>&#125;;<br><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">weak_ptr2</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">share_ptr2</span>&lt;</span>T&gt;;<br><span class="hljs-comment">//无参</span><br><span class="hljs-built_in">weak_ptr2</span>()<br>&#123;<br>ptr = <span class="hljs-literal">nullptr</span>;<br>pcount = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-comment">//拷贝</span><br><span class="hljs-built_in">weak_ptr2</span>(<span class="hljs-keyword">const</span> share_ptr2&lt;T&gt;&amp; sptr):<span class="hljs-built_in">ptr</span>(sptr.ptr),<span class="hljs-built_in">pcount</span>(sptr.pcount)<br>&#123;<br>&#125;<br><span class="hljs-comment">//析构</span><br>~<span class="hljs-built_in">weak_ptr2</span>()<br>&#123;<br>pcount = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-comment">//＝</span><br>weak_ptr2&amp; <span class="hljs-keyword">operator</span>=(share_ptr2&lt;T&gt;&amp; sptr)<br>&#123;<br>ptr = sptr.ptr;<br>pcount = sptr.pcount;<br><br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><span class="hljs-comment">//lock</span><br><span class="hljs-function">share_ptr2&lt;T&gt; <span class="hljs-title">lock</span><span class="hljs-params">()</span><span class="hljs-comment">//返回shared_ptr</span></span><br><span class="hljs-function"></span>&#123;<br>share_ptr2&lt;T&gt; tmp;<br>tmp.<span class="hljs-built_in">cons_from_weak</span>(*<span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">return</span> tmp;<br>&#125;<br><span class="hljs-comment">//expired</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">expired</span><span class="hljs-params">()</span><span class="hljs-comment">//引用计数为0返回true</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> (*<span class="hljs-keyword">this</span>-&gt;pcount == <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">use_count</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> *pcount;<br>&#125;<br><span class="hljs-keyword">private</span>:<br>T* ptr;<br><span class="hljs-keyword">int</span>* pcount;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">share_ptr2&lt;string&gt; <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> string(<span class="hljs-string">&quot;abc&quot;</span>))</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;p1:&quot;</span>&lt;&lt; p1.<span class="hljs-built_in">use_count</span>() &lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;*p1&lt;&lt; endl;<br><br><span class="hljs-function">share_ptr2&lt;string&gt; <span class="hljs-title">p2</span><span class="hljs-params">(p1)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;p2:&quot;</span> &lt;&lt; p2.<span class="hljs-built_in">use_count</span>() &lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;*p2 &lt;&lt;endl;<br><br><span class="hljs-function">share_ptr2&lt;string&gt; <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-keyword">new</span> string(<span class="hljs-string">&quot;aaa&quot;</span>))</span></span>;<br>p1 = p3;<br>cout &lt;&lt; <span class="hljs-string">&quot;p1:&quot;</span> &lt;&lt; p1.<span class="hljs-built_in">use_count</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; *p1 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;p2:&quot;</span> &lt;&lt; p2.<span class="hljs-built_in">use_count</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; *p2 &lt;&lt; endl;<br><br><span class="hljs-comment">/*************************************/</span><br><span class="hljs-function">share_ptr2&lt;string&gt; <span class="hljs-title">sp1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> string(<span class="hljs-string">&quot;abcd&quot;</span>))</span></span>;<br>cout &lt;&lt; sp1.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;<br><br><span class="hljs-function">weak_ptr2&lt;string&gt; <span class="hljs-title">wp1</span><span class="hljs-params">(sp1)</span></span>;<br>cout &lt;&lt; sp1.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;<br>cout &lt;&lt; wp1.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;<br>cout &lt;&lt; wp1.<span class="hljs-built_in">expired</span>() &lt;&lt; endl;<br><br><span class="hljs-function">share_ptr2&lt;string&gt; <span class="hljs-title">sp2</span><span class="hljs-params">(wp1.lock())</span></span>;<br>cout &lt;&lt; sp2.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;<br>cout &lt;&lt; sp1.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手动实现Arp发送和监听</title>
    <link href="/2021/04/02/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0Arp%E5%8F%91%E9%80%81%E5%92%8C%E7%9B%91%E5%90%AC/"/>
    <url>/2021/04/02/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0Arp%E5%8F%91%E9%80%81%E5%92%8C%E7%9B%91%E5%90%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="linux下实现Arp发送和监听功能"><a href="#linux下实现Arp发送和监听功能" class="headerlink" title="linux下实现Arp发送和监听功能"></a>linux下实现Arp发送和监听功能</h1><p>参考：<a href="https://blog.csdn.net/baidu_23081367/article/details/77199993">https://blog.csdn.net/baidu_23081367/article/details/77199993</a></p><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><code class="hljs C++&#123;.line-numbers&#125;">#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;sys&#x2F;types.h&gt;<br>#include &lt;sys&#x2F;socket.h&gt;<br>#include &lt;net&#x2F;if.h&gt;<br>#include &lt;arpa&#x2F;inet.h&gt;<br>#include &lt;netpacket&#x2F;packet.h&gt;<br>#include &lt;net&#x2F;ethernet.h&gt;<br>#include &lt;net&#x2F;if_arp.h&gt;<br>#include &lt;iostream&gt;<br>#include &lt;unistd.h&gt;<br> <br>&#x2F;&#x2F;如果只是想让对方断网，那就把mac源都设成MAC_TRICK，  <br>&#x2F;&#x2F;#define MAC_TRICK &#123;0x00, 0x00, 0x00, 0x00, 0x00, 0x00&#125;<br><br>&#x2F;&#x2F;想截获数据包那就用MAC_SOURCE  <br>unsigned char MAC_SOURCE[]&#x3D;  &#123;0x00,0x0c,0x29,0x63,0x1f,0x34&#125;;<br><br><br>&#x2F;&#x2F;源IP  <br>const  char IP_SOURCE[]&#x3D; &quot;192.168.100.80&quot;;<br>&#x2F;&#x2F;目标机器的MAC  <br>unsigned char MAC_TARGET[]&#x3D; &#123;0xff, 0xff, 0xff, 0xff, 0xff, 0xff&#125;;<br>&#x2F;&#x2F;目标机器的IP  <br>const char IP_TARGET[]&#x3D; &quot;192.168.100.22&quot; ; <br><br> <br>class arp_header<br>&#123;<br>public:<br>        &#x2F;&#x2F;DLC Header<br>    &#x2F;&#x2F;接收方mac<br>unsigned char mac_target[ETH_ALEN];<br>&#x2F;&#x2F;发送方mac<br>unsigned char mac_source[ETH_ALEN];<br>&#x2F;&#x2F;Ethertype - 0x0806是ARP帧的类型值<br>unsigned short ethertype;<br><br>&#x2F;&#x2F;ARP Frame<br>&#x2F;&#x2F;硬件类型 - 以太网类型值0x1<br>unsigned short hw_type;<br>&#x2F;&#x2F;上层协议类型 - IP协议(0x0800)<br>unsigned short proto_type;<br>&#x2F;&#x2F;MAC地址长度<br>unsigned char mac_addr_len;<br>&#x2F;&#x2F;IP地址长度<br>unsigned char ip_addr_len;<br>&#x2F;&#x2F;操作码 - 0x1表示ARP请求包,0x2表示应答包<br>unsigned short operation_code;<br>&#x2F;&#x2F;发送方mac<br>unsigned char mac_sender[ETH_ALEN];<br>&#x2F;&#x2F;发送方ip<br>unsigned char ip_sender[4];<br>&#x2F;&#x2F;接收方mac<br>unsigned char mac_receiver[ETH_ALEN];<br>&#x2F;&#x2F;接收方ip<br>unsigned char ip_receiver[4];<br>&#x2F;&#x2F;填充数据<br>unsigned char padding[18];&#x2F;&#x2F;4<br>&#125;;<br><br>&#x2F;&#x2F;arp类<br>class arp_packet<br>&#123;<br>public:<br>static void die(const char*pre);<br>static void print_arp_packet(arp_header ah);<br> <br>void arp_listen(); &#x2F;&#x2F;arp监听服务启动<br> <br>        &#x2F;&#x2F;初始化arp<br>void init_arp_send(unsigned char *iMAC_SOURCE, int LEN_MAC_SOURCE,const char IP_SOURCE[], unsigned char *iMAC_TARGET,int LEN_MAC_TARGET, const char IP_TARGET[]);<br>void arp_send();&#x2F;&#x2F;发送arp<br> <br>private:<br>        arp_header ah;&#x2F;&#x2F;arp头<br>        &#x2F;&#x2F;sockaddr_ll： 表示设备无关的物理层地址结构<br>struct sockaddr_ll recv_saddr, send_saddr;<br>int sfd;<br>struct in_addr inaddr_send, inaddr_recv;  <br>&#125;arp;<br> <br> <br> <br>int main()<br>&#123;<br>arp_packet tmp;<br>tmp.init_arp_send(MAC_SOURCE,sizeof(MAC_SOURCE) ,IP_SOURCE, NULL, sizeof(MAC_TARGET),IP_TARGET);<br>tmp.arp_send();<br>tmp.arp_listen();<br>return 0;<br> <br>&#125;<br><br>&#x2F;*<br>    arp发送<br>*&#x2F;<br>void arp_packet::arp_send()<br>&#123;<br>    printf(&quot;arp_publish_start\n&quot;);<br>int count &#x3D; 1;<br>for(int i&#x3D;0;i&lt;count;i++)<br>&#123;<br>int len &#x3D; sendto(sfd, &amp;ah, sizeof(ah), 0, (struct sockaddr*)&amp;send_saddr, sizeof(send_saddr));<br>print_arp_packet(ah);<br>if(-1 &#x3D;&#x3D; len)<br>&#123;<br>die(&quot;sendto&quot;);<br>&#125;<br>sleep(5);<br>&#125;<br>    printf(&quot;arp_publish_end\n&quot;);<br>&#125;<br> <br> <br>void arp_packet::die(const char*pre)<br>&#123;<br>    printf(&quot;arp_die\n&quot;);<br>perror(pre);<br>exit(1);<br>&#125;<br><br><br>&#x2F;*<br>    打印arp报文<br>    用于监听到arp报文后打印出来而已<br>*&#x2F;<br>void arp_packet::print_arp_packet(arp_header ah)<br>&#123;<br>printf(&quot;\n\n-----------------arp package begin--------------------------\n&quot;);<br> <br>printf(&quot;mac_target &#x3D; &quot;);<br>for(int i &#x3D; 0; i &lt; ETH_ALEN; i++)<br>&#123;<br>printf(i &gt; 0 ? &quot;:0x%.2x&quot; : &quot;0x%.2x&quot;, ah.mac_target[i]);<br>&#125;<br> <br>printf(&quot;\nmac_source &#x3D; &quot;);<br>for(int i &#x3D; 0; i &lt; ETH_ALEN; i++)<br>&#123;<br>printf(i &gt; 0 ? &quot;:0x%.2x&quot; : &quot;0x%.2x&quot;, ah.mac_source[i]);<br>&#125;<br> <br>printf(&quot;\nethertype &#x3D; 0x%x&quot;, ntohs(ah.ethertype));<br>printf(&quot;\nhw_type &#x3D; 0x%x&quot;, ntohs(ah.hw_type));<br>printf(&quot;\nproto_type &#x3D; 0x%x&quot;, ntohs(ah.proto_type));<br>printf(&quot;\nmac_addr_len &#x3D; 0x%x&quot;, ah.mac_addr_len);<br>printf(&quot;\nip_addr_len &#x3D; 0x%x&quot;, ah.ip_addr_len);<br>printf(&quot;\noperation_code &#x3D; 0x%x&quot;, ntohs(ah.operation_code));<br> <br>printf(&quot;\nmac_sender &#x3D; &quot;);<br>for(int i &#x3D; 0; i &lt; ETH_ALEN; i++)<br>&#123;<br>printf(i &gt; 0 ? &quot;:0x%.2x&quot; : &quot;0x%.2x&quot;, ah.mac_sender[i]);<br>&#125;<br> <br>printf(&quot;\nip_sender &#x3D; %s&quot;, inet_ntoa(*(struct in_addr*)(ah.ip_sender)));<br> <br>printf(&quot;\nmac_receiver &#x3D; &quot;);<br>for(int i &#x3D; 0; i &lt; ETH_ALEN; i++)<br>&#123;<br>printf(i &gt; 0 ? &quot;:0x%.2x&quot; : &quot;0x%.2x&quot;, ah.mac_receiver[i]);<br>&#125;<br> <br>printf(&quot;\nip_receiver &#x3D; %s&quot;, inet_ntoa(*(struct in_addr*)(ah.ip_receiver)));<br> <br>printf(&quot;\n-----------------arp package end----------------------------\n&quot;);<br>&#125;<br> <br> <br>&#x2F;*<br>·初始化arp头：<br>    - 设置协议类型<br>    - 设置4个地址<br>·设置原始套接字<br>*&#x2F; <br>void arp_packet::init_arp_send(unsigned char *iMAC_SOURCE, int LEN_MAC_SOURCE,const char IP_SOURCE[], unsigned char *iMAC_TARGET,int LEN_MAC_TARGET, const char IP_TARGET[])<br>&#123;<br>    &#x2F;&#x2F;下面这个不知道有什么用<br>memset(this, 0, sizeof(*this));<br><br>sfd &#x3D; socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ARP));&#x2F;&#x2F;ETH_P_ALL<br>if (sfd &#x3D;&#x3D; -1)<br>&#123;<br>perror(&quot;error : build socket1\n&quot;);<br>while(1);<br>&#125;<br><br>    printf(&quot;init_arp_publish_start\n&quot;);<br>    &#x2F;*<br>    知识点：<br>      arp请求的目的MAC地址一开始就是全0的呀，因为他并不知道目的地址的MAC地址，<br>      而在传输arp请求时，将其封装成帧的时候，会将封装后的MAC帧地址设成全f，<br>      表示这是一个广播数据包，因此全0与全f只是划分层次不同而已<br>    *&#x2F;<br>    <br><br>&#x2F;&#x2F;初始化目标MAC地址为0xff<br>    if (iMAC_TARGET &#x3D;&#x3D; NULL)&#x2F;&#x2F;如果为空，全部设置为0xff<br>&#123;<br>memset(ah.mac_target, 0xff, sizeof(ah.mac_target));<br>&#125;<br>else&#x2F;&#x2F;否则，赋值为MAC_TARGET，注意MAC_TARGET也是0xff<br>&#123;<br>memmove(ah.mac_target, iMAC_TARGET, sizeof(LEN_MAC_TARGET));<br>&#125;<br><br>    <br>    for(int i &#x3D; 0; i &lt; ETH_ALEN; i++)<br>&#123;<br>ah.mac_source[i]&#x3D;MAC_SOURCE[i];<br>&#125;<br><br><br>ah.ethertype &#x3D; htons(0x0806);&#x2F;&#x2F; 0x0806是ARP帧的类型值<br>ah.hw_type &#x3D; htons(0x1);&#x2F;&#x2F;硬件类型0x1<br>ah.proto_type &#x3D; htons(0x0800);&#x2F;&#x2F;上层协议类型 - IP协议(0x0800)<br>ah.mac_addr_len &#x3D; ETH_ALEN;<br>ah.ip_addr_len &#x3D; 4;<br>ah.operation_code &#x3D; htons(0x1);&#x2F;&#x2F;操作码 - 0x1表示ARP请求包,0x2表示应答包<br><br>    <br>    for(int i &#x3D; 0; i &lt; ETH_ALEN; i++)<br>&#123;<br>ah.mac_sender[i]&#x3D;MAC_SOURCE[i];<br>&#125;<br><br>    <br>    &#x2F;&#x2F;ip_sender发送方ip<br>inet_aton(IP_SOURCE, &amp;inaddr_send);<br>memcpy(&amp;ah.ip_sender, &amp;inaddr_send, sizeof(inaddr_send));<br><br>    &#x2F;&#x2F;mac_receiver &#x3D; MAC_TARGET; 接收方mac<br>memmove(&amp;ah.mac_receiver, ah.mac_target, sizeof(ah.mac_target));<br><br>    &#x2F;&#x2F;IP_TARGET；接收方IP<br>inet_aton(IP_TARGET, &amp;inaddr_recv);<br>memcpy(&amp;ah.ip_receiver, &amp;inaddr_recv, sizeof(inaddr_recv));<br> <br>memset(&amp;send_saddr, 0, sizeof(send_saddr));<br>send_saddr.sll_family &#x3D; AF_PACKET;&#x2F;&#x2F;&#x3D;&#x3D;历史原因PF_PACKET命名不同，或者说一个是协议簇一个是地址簇但值（&#x3D;17）是一样的<br>send_saddr.sll_ifindex &#x3D; IFF_BROADCAST;&#x2F;&#x2F;指定的接口名称的索引，非常重要  <br>    printf(&quot;init_arp_publish_end\n&quot;);<br>&#125;<br><br>&#x2F;*<br>    启动arp监听<br>*&#x2F;<br>void arp_packet::arp_listen()<br>&#123;<br>    printf(&quot;init_arp_server_start\n&quot;);<br>    &#x2F;&#x2F;arp原始套接字<br>memset(&amp;ah, 0, sizeof(arp_header));<br><br>sfd &#x3D; socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ARP));<br>if (sfd &#x3D;&#x3D; -1)<br>&#123;<br>perror(&quot;error : build socket\n&quot;); <br>while (1);<br>&#125;<br>    &#x2F;&#x2F;创建地址结构<br>memset(&amp;recv_saddr, 0, sizeof(sockaddr_ll));<br>recv_saddr.sll_family &#x3D; AF_PACKET;<br>recv_saddr.sll_protocol &#x3D; htons(ETH_P_ARP);<br>recv_saddr.sll_ifindex &#x3D; IFF_BROADCAST;<br>    &#x2F;&#x2F;连接<br>if (-1 &#x3D;&#x3D; bind(sfd, (struct sockaddr *)&amp;recv_saddr, sizeof(recv_saddr)))<br>&#123;<br>perror(&quot;error : something wrong in bind \n&quot;);<br>while (1);<br>&#125;<br>    <br>while(1)<br>&#123;<br>if(-1 &#x3D;&#x3D; recv(sfd, &amp;ah, sizeof(ah), 0))<br>&#123;<br>sleep(1);<br>continue;<br>&#125;<br>print_arp_packet(ah);<br>&#125;<br>printf(&quot;init_arp_server_end\n&quot;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>环境为ubuntu 18.04 、g++<br>注意允许得在root下<br><img src="/2021/04/02/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0Arp%E5%8F%91%E9%80%81%E5%92%8C%E7%9B%91%E5%90%AC/myArp.png" alt="运行图"></p>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>库函数底层实现</title>
    <link href="/2021/03/30/%E5%BA%93%E5%87%BD%E6%95%B0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/03/30/%E5%BA%93%E5%87%BD%E6%95%B0%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="C库函数"><a href="#C库函数" class="headerlink" title="C库函数"></a>C库函数</h1><h2 id="1-memcpy"><a href="#1-memcpy" class="headerlink" title="1. memcpy"></a>1. memcpy</h2><p>注意地址重叠情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++&#123;.line-numbers&#125;">#include&lt;iostream&gt;<br>using namespace std;<br><br>void* memcpy2(void* src, void* dst, int size)<br>&#123;<br>if (dst &#x3D;&#x3D; NULL || src &#x3D;&#x3D; NULL)<br>return NULL;<br>char* t_src &#x3D; nullptr;<br>char* t_dst &#x3D; nullptr;<br>if ((src &lt; dst) &amp;&amp; ((char*)dst - (char*)src &lt; size))&#x2F;&#x2F;注意转换成char *型<br>&#123;<br>t_src &#x3D; (char*)src + size - 1;&#x2F;&#x2F;减一，因为size&#x3D;1时，表示复制自身，不是下一个<br>t_dst &#x3D; (char*)dst + size - 1;<br>while (size--)<br>&#123;<br>*t_dst-- &#x3D; *t_src--;<br>&#125;<br>&#125;<br>else<br>&#123;<br>t_src &#x3D; (char*)src;<br>t_dst &#x3D; (char*)dst;<br>while (size--)<br>&#123;<br>*t_dst++ &#x3D; *t_src++;<br>&#125;<br>&#125;<br><br>return dst;<br>&#125;<br><br>int main()<br>&#123;<br>char a[] &#x3D; &quot;abcdefg&quot;;<br>memcpy2(a, a+3, 4);<br>cout &lt;&lt; a &lt;&lt; endl;<br><br>system(&quot;pause&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-strcpy"><a href="#2-strcpy" class="headerlink" title="2. strcpy"></a>2. strcpy</h2><p>需要注意的是如果目标dst不够大，而源字符串的长度又太长，可能会造成缓冲溢出的情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++&#123;.line-numbers&#125;">#include&lt;iostream&gt;<br>#include&lt;string&gt;<br><br>using namespace std;<br><br>char* strcpy2(char* src,char* dst)<br>&#123;<br>if (dst &#x3D;&#x3D; NULL || src &#x3D;&#x3D; NULL)<br>return NULL;<br>char* psrc &#x3D; src;<br>char* pdst &#x3D; dst;<br>while ((*pdst ++ &#x3D; *trsc++) !&#x3D; &#39;\0&#39;);<br>return dst;<br>&#125;<br><br>int main()<br>&#123;<br>char src[] &#x3D; &quot;abc&quot;;<br>char dst[] &#x3D; &quot;efg&quot;;<br>strcpy2(src, dst);<br>printf(&quot;%s&quot;, dst);<br><br>system(&quot;pause&quot;);<br>return 1;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建教程</title>
    <link href="/2021/03/29/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <url>/2021/03/29/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="博客搭建教程"><a href="#博客搭建教程" class="headerlink" title="博客搭建教程"></a>博客搭建教程</h1><p>参考：<a href="https://www.zhihu.com/question/21193762/answer/489124966">https://www.zhihu.com/question/21193762/answer/489124966</a></p><h2 id="原电脑"><a href="#原电脑" class="headerlink" title="原电脑"></a>原电脑</h2><ol><li>先在github上新建一个hexo分支</li><li>在这个仓库的settings中，选择默认分支为hexo分支</li><li>在除了原博客目录下的其他目录下，打开git bash</li><li>git clone 你的博客仓库地址<br>如git clone <a href="mailto:&#103;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#x6f;&#109;</a>:supersheng1998/supersheng1998.github.io.git</li><li>在克隆到本地的XXX.github.io中，把除了.git 文件夹外的所有文件都删掉</li><li>把之前我们写的博客源文件全部复制过来，除了.deploy_git。<br>如果克隆过theme中的主题文件，则输出调theme中的.git文件夹。<br>注意得复制过来.gitignore。</li><li>在当前bash里（此时是hexo分支），依次输入git add.; git commit -m “备注文本”;git push origin hexo;</li><li>完成，结果图如下，去GitHub的hexo分支看，是不是除node_modules、public、db.json都上传了。<br><img src="/2021/03/29/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/%E7%8E%AF%E5%A2%83%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%88%90%E5%8A%9F%E5%9B%BE.png" alt="上传成功图"></li></ol><h2 id="新电脑"><a href="#新电脑" class="headerlink" title="新电脑"></a>新电脑</h2><ol><li>安装git和node.js,绑定GitHub账号，设置SSH</li><li>新建文件夹，clone你的hexo分支。<br>git clone …</li><li>依次输入npm i hexo-cli -g；npm install；npm install hexo-deployer-git –save；</li><li>然后就是可以写博客了</li></ol><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ol><li>写之前git pull origin hexo</li><li>每次写完先把源文件上传<br>git add.; git commit -m “备注文本”;git push origin hexo;</li><li>再执行hexo g; hexo d;</li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C/C++小知识点</title>
    <link href="/2021/03/24/C++%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2021/03/24/C++%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="C-C-小知识点"><a href="#C-C-小知识点" class="headerlink" title="C/C++小知识点"></a>C/C++小知识点</h1><h2 id="与、或的短路"><a href="#与、或的短路" class="headerlink" title="与、或的短路"></a>与、或的短路</h2><p>“或”逻辑前面为1，“与”逻辑前面为0就会发生短路，即不执行后面的了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a=<span class="hljs-number">5</span>,b=<span class="hljs-number">6</span>,c=<span class="hljs-number">7</span>,d=<span class="hljs-number">8</span>,m=<span class="hljs-number">2</span>,n=<span class="hljs-number">2</span>;<br>    (m=a&lt;b)||(n=c&gt;d);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t%d&quot;</span>,m,n);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出的结果为1,2.为什么呢，因为<code>a&lt;b，m=1</code>,这个“或”逻辑就被“短路”掉了，后面的语句就没被执行，所以n还是等于原先的2 </p><p>“||”只要前一个为１，结果就为１。因此短路,并且不计算（<code>n=c&gt;d</code>);</p><p>“&amp;&amp;”只要前面是0，结果就为0，就不执行后面的。</p><p><img src="/2021/03/24/C++%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%86%8A%E7%8C%AB%E5%A4%B4.jpg" alt="测试图片"></p><h2 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h2><p>bool值不能用~取反，得异或true才能取反。</p>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
