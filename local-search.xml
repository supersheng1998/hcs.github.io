<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>库函数/对象底层实现</title>
    <link href="/2021/03/30/%E5%BA%93%E5%87%BD%E6%95%B0-%E5%AF%B9%E8%B1%A1%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/03/30/%E5%BA%93%E5%87%BD%E6%95%B0-%E5%AF%B9%E8%B1%A1%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="C库函数"><a href="#C库函数" class="headerlink" title="C库函数"></a>C库函数</h1><h2 id="1-memcpy"><a href="#1-memcpy" class="headerlink" title="1. memcpy"></a>1. memcpy</h2><p>注意地址重叠情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++&#123;.line-numbers&#125;">#include&lt;iostream&gt;<br>using namespace std;<br><br>void* memcpy2(void* src, void* dst, int size)<br>&#123;<br>if (dst &#x3D;&#x3D; NULL || src &#x3D;&#x3D; NULL)<br>return NULL;<br>char* t_src &#x3D; nullptr;<br>char* t_dst &#x3D; nullptr;<br>if ((src &lt; dst) &amp;&amp; ((char*)dst - (char*)src &lt; size))&#x2F;&#x2F;注意转换成char *型<br>&#123;<br>t_src &#x3D; (char*)src + size - 1;&#x2F;&#x2F;减一，因为size&#x3D;1时，表示复制自身，不是下一个<br>t_dst &#x3D; (char*)dst + size - 1;<br>while (size--)<br>&#123;<br>*t_dst-- &#x3D; *t_src--;<br>&#125;<br>&#125;<br>else<br>&#123;<br>t_src &#x3D; (char*)src;<br>t_dst &#x3D; (char*)dst;<br>while (size--)<br>&#123;<br>*t_dst++ &#x3D; *t_src++;<br>&#125;<br>&#125;<br><br>return dst;<br>&#125;<br><br>int main()<br>&#123;<br>char a[] &#x3D; &quot;abcdefg&quot;;<br>memcpy2(a, a+3, 4);<br>cout &lt;&lt; a &lt;&lt; endl;<br><br>system(&quot;pause&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-strcpy"><a href="#2-strcpy" class="headerlink" title="2. strcpy"></a>2. strcpy</h2><p>需要注意的是如果目标dst不够大，而源字符串的长度又太长，可能会造成缓冲溢出的情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++&#123;.line-numbers&#125;">#include&lt;iostream&gt;<br>#include&lt;string&gt;<br><br>using namespace std;<br><br>char* strcpy2(char* src,char* dst)<br>&#123;<br>if (dst &#x3D;&#x3D; NULL || src &#x3D;&#x3D; NULL)<br>return NULL;<br>char* psrc &#x3D; src;<br>char* pdst &#x3D; dst;<br>while ((*pdst ++ &#x3D; *trsc++) !&#x3D; &#39;\0&#39;);<br>return dst;<br>&#125;<br><br>int main()<br>&#123;<br>char src[] &#x3D; &quot;abc&quot;;<br>char dst[] &#x3D; &quot;efg&quot;;<br>strcpy2(src, dst);<br>printf(&quot;%s&quot;, dst);<br><br>system(&quot;pause&quot;);<br>return 1;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建教程</title>
    <link href="/2021/03/29/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <url>/2021/03/29/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="博客搭建教程"><a href="#博客搭建教程" class="headerlink" title="博客搭建教程"></a>博客搭建教程</h1><p>参考：<a href="https://www.zhihu.com/question/21193762/answer/489124966">https://www.zhihu.com/question/21193762/answer/489124966</a></p><h2 id="原电脑"><a href="#原电脑" class="headerlink" title="原电脑"></a>原电脑</h2><ol><li>先在github上新建一个hexo分支</li><li>在这个仓库的settings中，选择默认分支为hexo分支</li><li>在除了原博客目录下的其他目录下，打开git bash</li><li>git clone 你的博客仓库地址<br>如git clone <a href="mailto:&#103;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#111;&#109;">&#103;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#111;&#109;</a>:supersheng1998/supersheng1998.github.io.git</li><li>在克隆到本地的XXX.github.io中，把除了.git 文件夹外的所有文件都删掉</li><li>把之前我们写的博客源文件全部复制过来，除了.deploy_git。<br>如果克隆过theme中的主题文件，则输出调theme中的.git文件夹。<br>注意得复制过来.gitignore。</li><li>在当前bash里（此时是hexo分支），依次输入git add.; git commit -m “备注文本”;git push origin hexo;</li><li>完成，结果图如下，去GitHub的hexo分支看，是不是除node_modules、public、db.json都上传了。<br><img src="/2021/03/29/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/%E7%8E%AF%E5%A2%83%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%88%90%E5%8A%9F%E5%9B%BE.png" alt="上传成功图"></li></ol><h2 id="新电脑"><a href="#新电脑" class="headerlink" title="新电脑"></a>新电脑</h2><ol><li>安装git和node.js,绑定GitHub账号和游戏，设置SSH</li><li>新建文件夹，clone你的hexo分支。<br>git clone …</li><li>依次输入npm i hexo-cli -g；npm install；npm install hexo-deployer-git –save；</li><li>然后就是可以写博客了</li></ol><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ol><li>写之前git pull origin hexo</li><li>每次写完先把源文件上传<br>git add.; git commit -m “备注文本”;git push origin hexo;</li><li>再执行hexo g; hexo d;</li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C/C++小知识点</title>
    <link href="/2021/03/24/C++%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2021/03/24/C++%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="C-C-小知识点"><a href="#C-C-小知识点" class="headerlink" title="C/C++小知识点"></a>C/C++小知识点</h1><h2 id="与、或的短路"><a href="#与、或的短路" class="headerlink" title="与、或的短路"></a>与、或的短路</h2><p>“或”逻辑前面为1，“与”逻辑前面为0就会发生短路，即不执行后面的了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a=<span class="hljs-number">5</span>,b=<span class="hljs-number">6</span>,c=<span class="hljs-number">7</span>,d=<span class="hljs-number">8</span>,m=<span class="hljs-number">2</span>,n=<span class="hljs-number">2</span>;<br>    (m=a&lt;b)||(n=c&gt;d);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t%d&quot;</span>,m,n);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出的结果为1,2.为什么呢，因为<code>a&lt;b，m=1</code>,这个“或”逻辑就被“短路”掉了，后面的语句就没被执行，所以n还是等于原先的2 </p><p>“||”只要前一个为１，结果就为１。因此短路,并且不计算（<code>n=c&gt;d</code>);</p><p>“&amp;&amp;”只要前面是0，结果就为0，就不执行后面的。</p><p><img src="/2021/03/24/C++%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%86%8A%E7%8C%AB%E5%A4%B4.jpg" alt="测试图片"></p><h2 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h2><p>bool值不能用~取反，得异或true才能取反。</p>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
